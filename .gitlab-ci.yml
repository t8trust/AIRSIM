# Cache downloaded dependencies and plugins between builds.
# Not strictly necessary, but speeds up the builds.

variables:
  IMAGE_VAR: "node:20.11.1"

stages:
    - test-run
    - deploy    
    - sonarqube-check
    - sonarqube-vulnerability-report
    
    

deploy:
  stage: deploy
  only:
    - main
  image: $IMAGE_VAR # docker image with Node
  #needs:
  #  - ["test-run"]
  before_script:
    # The runners on the forge need a proxy to access the web. mvn
    # ignores the $http_proxy & friends variable => write a
    # configuration file that does this for us.
    - chmod 400 $CI_SSH_KEY
    # Useful only for debugging

  script:
    - cd mif10-frontend/
    - npm install
    - npm run build
    - cd ../mif10-backend
    - npm install
    - npm run build
    - cd ..
    # Only after everything is built correctly, transfer the files 
    - ssh -o StrictHostKeyChecking=no -i $CI_SSH_KEY gitlabci@192.168.75.63 "killall -q node; exit 0" # exit node process
    - ssh -o StrictHostKeyChecking=no -i $CI_SSH_KEY gitlabci@192.168.75.63 "rm -rf /usr/share/nginx/html/*; rm -rf /usr/share/nodejs-backend/server/*"
    - scp -r -o StrictHostKeyChecking=no -i $CI_SSH_KEY ./mif10-frontend/dist/* gitlabci@192.168.75.63:/usr/share/nginx/html/
    - scp -r -o StrictHostKeyChecking=no -i $CI_SSH_KEY ./mif10-backend/dist/* gitlabci@192.168.75.63:/usr/share/nodejs-backend/server/
    # Unfortunately, the server has not enough ram to install npm packages itself
    - scp -r -o StrictHostKeyChecking=no -i $CI_SSH_KEY ./mif10-backend/node_modules/ gitlabci@192.168.75.63:/usr/share/nodejs-backend/server/
    # Launch start script (node /usr/share/nodejs-backend/server/main.js)
    - ssh -o StrictHostKeyChecking=no -i $CI_SSH_KEY gitlabci@192.168.75.63 "source ~/.nvm/nvm.sh; nohup /usr/share/nodejs-backend/start.sh </dev/null >/dev/null 2>&1 & exit 0"

test-run:
  stage: test-run
  image: node:20.11.1
  only: 
    - main
  script:
    - cd mif10-backtend/test
    - npm install
    - npm run test:e2e

sonarqube-check:
  stage: sonarqube-check
  image: 
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: 
    - sonar-scanner
  allow_failure: true
  only:
    - merge_requests
    - master
    - main
    - develop

sonarqube-vulnerability-report:
  stage: sonarqube-vulnerability-report
  image: cimg/node:20.12
  script:
    - 'curl -u "${SONAR_TOKEN}:" "${SONAR_HOST_URL}/api/issues/gitlab_sast_export?projectKey=mif10-gr15-2023&branch=${CI_COMMIT_BRANCH}&pullRequest=${CI_MERGE_REQUEST_IID}" -o gl-sast-sonar-report.json'
  allow_failure: true
  only:
    - merge_requests
    - master
    - main
    - develop
  artifacts:
    expire_in: 1 day
    reports:
      sast: gl-sast-sonar-report.json
  dependencies:
    - sonarqube-check